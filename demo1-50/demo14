这道题让我们求一系列字符串的共同前缀，没有什么特别的技巧，
无脑查找即可，我们定义两个变量i和j，其中i是遍历搜索字符串中的字符，
j是遍历字符串集中的每个字符串。这里将单词上下排好，
则相当于一个各行长度有可能不相等的二维数组，我们遍历顺序和一般的横向逐行遍历不同，
而是采用纵向逐列遍历，在遍历的过程中，如果某一行没有了，说明其为最短的单词，
因为共同前缀的长度不能长于最短单词，所以此时返回已经找出的共同前缀。
我们每次取出第一个字符串的某一个位置的单词，然后遍历其他所有字符串的对应位置看是否相等，
如果有不满足的直接返回res，如果都相同，则将当前字符存入结果，继续检查下一个位置的字符，参见代码如下：
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.empty())
            return "";
        //寻找最长前缀
        string res="";
        for(int j=0;j<strs[0].size();j++)
        {
            char c=strs[0][j];
            for(int i=1;i<strs.size();i++)
            {
                if(j>=strs[i].size()||strs[i][j]!=c)
                    return res;
            }
            res.push_back(strs[0][j]);
        }
        return res;
    }
};

我们可以对上面的方法进行适当精简，如果我们发现当前某个字符和第一个字符串对应位置的字符不相等，
说明不会再有更长的共同前缀了，我们直接通过用substr的方法直接取出共同前缀的子字符串。
如果遍历结束前没有返回结果的话，说明第一个单词就是公共前缀，返回为结果即可。代码如下：
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.empty())
            return "";
        //寻找最长前缀
        for(int j=0;j<strs[0].size();j++)
        {
            for(int i=1;i<strs.size();i++)
            {
                if(j>=strs[i].size()||strs[i][j]!=strs[0][j])
                    return strs[0].substr(0,j);
            }
        }
        return strs[0];
    }
};
