//暴力o(n3)，runtime通不过
class Solution {
public:
    //判断是不是回文
    int isPalindromic(string str)
    {
        int n=str.size();
        for(int i=0;i<n;i++)
        {
            if(str[i]!=str[n-1-i])
                return 0;
        }
        return 1;
    }
    string longestPalindrome(string s) {
        int max=0;
        string out;
        for(int i=0;i<s.size();i++)
        {
            for(int j=i;j<s.size();j++)
            {
                string t=s.substr(i, j-i+1);
                if(isPalindromic(t)&&t.size()>=max)
                {
                  max=t.size();
                   out=t;
                }
            }
        }
        return out;
    }
};

//DP o(n2)
//定义i到j为子串
//dp[i][j]=dp[i+1][j-1]+str[i]==str[j]
//dp[i][i]=0
//dp[i][i+1]=1 if str[i]==str[i+1]
class Solution {
public:
    string longestPalindrome(string s) {
        int len=s.size();
        if(len==0||len==1)
            return s;
        int dp[1024][1024]={0};
        int start=0,longest=1;
        for(int i=0;i<len;i++)
        {
            dp[i][i]=1;
            if(i<len-1&&s[i]==s[i+1])
            {
                dp[i][i+1]=1;
                start=i;
                longest=2;
            }
        }
        for(int l=3;l<=len;l++) //定义子串长度
        {
            for(int i=0;i+l-1<len;i++)
            {
                int j=i+l-1;
                if(s[i]==s[j]&&dp[i+1][j-1]==1)
                {
                    dp[i][j]=1;
                    start=i;
                    longest=l;
                }
            }
        }
        return s.substr(start,longest);
    }
};
