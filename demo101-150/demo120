//动态规划，一层一层累加，自顶向下（改变原数组）
//triangle[i][j]+= min(triangle[i - 1][j - 1], triangle[i - 1][j])
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<triangle[i].size();j++)
            {
                if(j==0)
                    triangle[i][j]+=triangle[i-1][j];
                else if(j==triangle[i].size()-1)
                    triangle[i][j]+=triangle[i-1][j-1];
                else
                    triangle[i][j]+=min(triangle[i-1][j-1],triangle[i-1][j]);     
            }
        }
        int out=1000;
        for(int j=0;j<n;j++)
        {
            out=min(out,triangle[n-1][j]);
        }
        return out;
    }
};

//动态规划，一层一层累加，自底向上（不改变原数组），额外空间o(n)
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        vector<int>dp(triangle.back().begin(),triangle.back().end());
        int n=triangle.size();
        for(int i=n-2;i>=0;i--)
        {
            for(int j=0;j<triangle[i].size();j++)
            {
                dp[j]=triangle[i][j]+min(dp[j],dp[j+1]);
            }
        }
        return dp[0];
    }
};
