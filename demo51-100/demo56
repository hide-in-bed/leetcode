//先排序再合并
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if(intervals.empty())
            return intervals;
         sort(intervals.begin(), intervals.end(), [](Interval &a, Interval &b) {return a.start < b.start;});
        vector<Interval>out{intervals[0]};
        for(int i=1;i<intervals.size();i++)
        {
            if(out.back().end>=intervals[i].start)
                out.back().end=max(out.back().end,intervals[i].end);
            else
                out.push_back(intervals[i]);
        }
        return out;
    }
};
