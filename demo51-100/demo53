//暴力
//o(n2)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int max=nums[0];
        for(int i=0;i<n;i++)
        {
            int sum=0;
            for(int j=i;j<n;j++)
            {
                sum+=nums[j];
                if(sum>max)
                    max=sum;
            }
        }
        return max;
    }
};

//dp
//o(n)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int out=INT_MIN,sum=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            sum=max(sum+nums[i],nums[i]);
            out=max(sum,out);
        }
        return out;
    }
};

//二分法
//nlogn
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.empty())
            return 0;
        return divide(nums,0,nums.size()-1);
    }
    int divide(vector<int>& nums,int l,int r)
    {
        if(l>=r)
            return nums[l];
        int mid=(l+r)/2;
        int lmax=divide(nums,l,mid-1);
        int rmax=divide(nums,mid+1,r);
        int mmax=nums[mid],t=mmax;
        for(int i=mid-1;i>=l;i--)
        {
            t+=nums[i];
            mmax=max(mmax,t);
        }
        t=mmax;
        for(int j=mid+1;j<=r;j++)
        {
            t+=nums[j];
            mmax=max(mmax,t);
        }
        return max(mmax,max(lmax,rmax));
    }
};
